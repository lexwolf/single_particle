#!/bin/bash

export LC_NUMERIC="en_US.UTF-8"

show_help() {
    echo "Usage: bash $0 [-c] [-h] [-r new_omemi:new_omema] [-n|-a]"
    echo ""
    echo "Options:"
    echo "  -c    Compile the codes before executing the script"
    echo "  -h    Show this help message and exit"
    echo "  -r    Specify new_omemi and new_omema manually in the format new_omemi:new_omema"
    echo "  -n    Use numerical calculation for time dependency"
    echo "  -a    Use analytical calculation for time dependency"
    echo ""
}

# Defaults
use_compile=false
plot_mode="anl"
custom_range=""

# Parse options
while getopts "char:na" opt; do
  case ${opt} in
    c ) use_compile=true ;;
    h ) show_help; exit 0 ;;
    r ) custom_range=${OPTARG} ;;
    n ) plot_mode="num" ;;
    a ) plot_mode="anl" ;;
    * ) show_help; exit 1 ;;
  esac
done

infile="../data/input/nanosphere_eV.dat"
if [ ! -f "$infile" ]; then
  echo "Error: Input file '$infile' not found!"
  exit 1
fi

if $use_compile; then
  echo "> Compiling selected sources..."
  # Always compile steady-state and frohlich
  g++ -Wall -I/usr/local/include -L/usr/local/lib ../src/steady_state.cxx -o ../bin/sts -lgsl -lgslcblas -lm -larmadillo
  g++ -Wall -I/usr/local/include -L/usr/local/lib ../src/frohlich.cxx -o ../bin/fro -lgsl -lgslcblas -lm -larmadillo
  # Compile time-dependent module depending on plot mode
  if [ "$plot_mode" == "num" ]; then
    g++ -Wall -I/usr/local/include -L/usr/local/lib ../src/num_time.cxx -o ../bin/num -lgsl -lgslcblas -lm -larmadillo
  elif [ "$plot_mode" == "anl" ]; then
    g++ -Wall -I/usr/local/include -L/usr/local/lib ../src/anl_time.cxx -o ../bin/anl -lgsl -lgslcblas -lm -larmadillo
  else
    echo "Warning: No time-dependency mode selected. Skipping time-code compilation."
  fi

  echo "> Compilation complete."
fi

# Backup the original file
cp "$infile" "${infile}.bak"

read r1 Dome ome_0 G omemi omema mtl mdl active sol E0< $infile

# Override range if requested
if [ ! -z "$custom_range" ]; then
  omemi=$(echo "$custom_range" | cut -d ':' -f 1)
  omema=$(echo "$custom_range" | cut -d ':' -f 2)
fi

info=$(../bin/fro)
om0=$(echo $info | cut -d ' ' -f1)
Gth=$(echo $info | cut -d ' ' -f2)
echo $om0 $Gth > ../data/output/frohlich.dat

echo "> Using parameters from '$infile'"
echo "> If gain emission is centered at ome0 = $om0"
echo "> Threshold gain is Gth = $Gth"

file=("nopump" "hlfGth" "dwnGth" "fllGth" "ovrGth")
mG=("0." "0.5" "0.9" "1." "1.1")

for j in {0..4}
do
  echo "> Plasmon with G = ${mG[$j]}*Gth"
  wG=$(echo "${mG[$j]} * $Gth" | bc -l)
  {
      echo "$r1 $Dome $om0 $wG $omemi $omema $mtl $mdl $active $sol $E0"
      echo "# r Dome ome0 G omemi omema mtl mdl atv sol E0"
      echo "** WARNING: This file was automatically edited by $0."
      echo "** Do not edit this file manually until the process ends."
  } > $infile

  mkdir -p "../img/${file[$j]}/pdf" "../img/${file[$j]}/png"

  N=100
  dig="${#N}"
  frm="%0${dig}d"
  dom=$(echo "($omema - $omemi)/$N" | bc -l)
  # Execute steady-state
  ../bin/sts
  cmpcname="../data/output/compounds.dat"
  # Create the background data
  awk '{
      if (NR > 7) { 
          for (i = -1; i <= 1; i++) { 
          print $1, i, ($5 < 0 ? -$5 : $5) 
          } 
          print ""
          }
      }' $cmpcname > "../data/output/background.dat"
  for (( i=0; i<=N; i++ ))
  do
    ome=$(echo "$omemi + $i * $dom" | bc -l)
    # Execute time-dependent solver if requested
    if [ "$plot_mode" == "num" ]; then
    ../bin/num $ome
    elif [ "$plot_mode" == "anl" ]; then
    ../bin/anl $ome
    fi
    echo $ome > ../data/output/omega.dat

    # Select gnuplot script
    if [ "$plot_mode" == "num" ]; then
      gnuplot ../scripts/numtime.gp
    elif [ "$plot_mode" == "anl" ]; then
      gnuplot ../scripts/anltime.gp
    fi
    
    name=$(printf $frm $i)
    mv ../img/intime.pdf ../img/${file[$j]}/pdf/im-${name}.pdf
    mv ../img/intime.png ../img/${file[$j]}/png/im-${name}.png
  done

  convert -dispose previous -delay 20 ../img/${file[$j]}/png/*.png -loop 0 ../img/${file[$j]}.gif
done

# Reinstate the original content of the file
mv "${infile}.bak" "$infile"
exit 0
